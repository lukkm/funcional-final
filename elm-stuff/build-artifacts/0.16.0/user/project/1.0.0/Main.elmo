Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values) return _elm.Main.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $GraphUtils = Elm.GraphUtils.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp$Simple = Elm.StartApp.Simple.make(_elm),
   $String = Elm.String.make(_elm),
   $Styles = Elm.Styles.make(_elm),
   $Utils = Elm.Utils.make(_elm);
   var _op = {};
   var getBoardStatusRec = F4(function (board,color,x,y) {
      return _U.cmp(x,$Utils.sizeOf(board)) > 0 || _U.cmp(y,$Utils.sizeOf(board)) > 0 ? $Utils.Won : !_U.eq(A3($Utils.getM,board,x,y),
      color) ? $Utils.InGame : _U.eq(A4(getBoardStatusRec,board,color,x + 1,y),$Utils.Won) && _U.eq(A4(getBoardStatusRec,board,color,x,y + 1),
      $Utils.Won) ? $Utils.Won : $Utils.InGame;
   });
   var getBoardStatus = function (board) {    return A4(getBoardStatusRec,board,A3($Utils.getM,board,1,1),1,1);};
   var changeColor = F2(function (model,tile) {
      var _p0 = model.board;
      if (_p0.ctor === "Nothing") {
            return model;
         } else {
            var _p1 = _p0._0;
            var remainingMoves = model.moves - 1;
            var updatedBoard = A5($Utils.updateBoard,_p1,1,1,A2($Utils.getL,A2($Utils.getL,_p1,1),1),tile);
            var boardStatus = getBoardStatus(updatedBoard);
            return _U.eq(boardStatus,$Utils.Won) || _U.cmp(remainingMoves,0) > 0 ? _U.update(model,
            {board: $Maybe.Just(updatedBoard),status: boardStatus,moves: model.moves - 1,showHint: false}) : _U.update(model,
            {board: $Maybe.Just(updatedBoard),status: $Utils.Lost,moves: 0,showHint: false});
         }
   });
   var ShowHint = {ctor: "ShowHint"};
   var Moves = function (a) {    return {ctor: "Moves",_0: a};};
   var BoardSize = function (a) {    return {ctor: "BoardSize",_0: a};};
   var Start = {ctor: "Start"};
   var ChangeColor = function (a) {    return {ctor: "ChangeColor",_0: a};};
   var getFinishedText = function (str) {    return A2($Html.h1,_U.list([$Styles.center]),_U.list([$Html.text(str)]));};
   var getPlayButton = function (address) {
      return A2($Html.div,
      _U.list([$Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "margin",_1: "0 auto"},{ctor: "_Tuple2",_0: "width",_1: "250px"}]))]),
      _U.list([A2($Html.img,
      _U.list([$Html$Attributes.src("img/playbutton.jpeg")
              ,$Html$Attributes.width(250)
              ,A2($Html$Events.onClick,address,Start)
              ,$Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "margin-top",_1: "20px"}]))]),
      _U.list([]))]));
   };
   var getPlayOptions = F2(function (address,model) {
      return A2($Html.div,
      _U.list([]),
      _U.list([A2($Html.h3,_U.list([]),_U.list([$Html.text("Select Board Size: ")]))
              ,A2($Html.input,
              _U.list([$Html$Attributes.type$("radio")
                      ,$Html$Attributes.checked(_U.eq(model.boardSize,6))
                      ,A3($Html$Events.on,"change",$Html$Events.targetChecked,function (_p2) {    return A2($Signal.message,address,BoardSize(6));})]),
              _U.list([]))
              ,$Html.text("6x6")
              ,A2($Html.br,_U.list([]),_U.list([]))
              ,A2($Html.input,
              _U.list([$Html$Attributes.type$("radio")
                      ,$Html$Attributes.checked(_U.eq(model.boardSize,7))
                      ,A3($Html$Events.on,"change",$Html$Events.targetChecked,function (_p3) {    return A2($Signal.message,address,BoardSize(7));})]),
              _U.list([]))
              ,$Html.text("7x7")
              ,A2($Html.br,_U.list([]),_U.list([]))
              ,A2($Html.input,
              _U.list([$Html$Attributes.type$("radio")
                      ,$Html$Attributes.checked(_U.eq(model.boardSize,8))
                      ,A3($Html$Events.on,"change",$Html$Events.targetChecked,function (_p4) {    return A2($Signal.message,address,BoardSize(8));})]),
              _U.list([]))
              ,$Html.text("8x8")
              ,A2($Html.br,_U.list([]),_U.list([]))
              ,A2($Html.h3,_U.list([]),_U.list([$Html.text("Select Game Mode: ")]))
              ,A2($Html.input,
              _U.list([$Html$Attributes.type$("radio")
                      ,$Html$Attributes.checked(_U.eq(model.startingMoves,20))
                      ,A3($Html$Events.on,"change",$Html$Events.targetChecked,function (_p5) {    return A2($Signal.message,address,Moves(20));})]),
              _U.list([]))
              ,$Html.text("Easy")
              ,A2($Html.br,_U.list([]),_U.list([]))
              ,A2($Html.input,
              _U.list([$Html$Attributes.type$("radio")
                      ,$Html$Attributes.checked(_U.eq(model.startingMoves,15))
                      ,A3($Html$Events.on,"change",$Html$Events.targetChecked,function (_p6) {    return A2($Signal.message,address,Moves(15));})]),
              _U.list([]))
              ,$Html.text("Medium")
              ,A2($Html.br,_U.list([]),_U.list([]))
              ,A2($Html.input,
              _U.list([$Html$Attributes.type$("radio")
                      ,$Html$Attributes.checked(_U.eq(model.startingMoves,10))
                      ,A3($Html$Events.on,"change",$Html$Events.targetChecked,function (_p7) {    return A2($Signal.message,address,Moves(10));})]),
              _U.list([]))
              ,$Html.text("Hard")
              ,A2($Html.br,_U.list([]),_U.list([]))]));
   });
   var getSuggestedMoveView = F2(function (address,model) {
      if (model.showHint) {
            var _p8 = model.board;
            if (_p8.ctor === "Nothing") {
                  return A2($Html.div,_U.list([]),_U.list([]));
               } else {
                  return A2($Html.div,
                  _U.list([$Styles.movesContainer]),
                  _U.list([A2($Html.div,
                  _U.list([]),
                  _U.list([$Html.text("Suggested move: "),A2($Html.div,_U.list([$Basics.fst($GraphUtils.getSuggestedMoveStyle(_p8._0))]),_U.list([]))]))]));
               }
         } else return A2($Html.div,_U.list([$Styles.showHintButton,A2($Html$Events.onClick,address,ShowHint)]),_U.list([$Html.text("View Hint")]));
   });
   var getRemainingMoves = function (model) {
      return A2($Html.div,_U.list([$Styles.movesContainer]),_U.list([$Html.text(A2($String.append,"Remaining moves: ",$Basics.toString(model.moves)))]));
   };
   var getButtons = function (address) {
      return A2($Html.div,
      _U.list([]),
      _U.list([A2($Html.h4,_U.list([]),_U.list([$Html.text("Click on a color to change")]))
              ,A2($Html.div,
              _U.list([$Styles.buttonsContainer]),
              _U.list([A2($Html.div,_U.list([$Styles.yellowTileInline,A2($Html$Events.onClick,address,ChangeColor($Utils.Yellow))]),_U.list([]))
                      ,A2($Html.div,_U.list([$Styles.blueTileInline,A2($Html$Events.onClick,address,ChangeColor($Utils.Blue))]),_U.list([]))
                      ,A2($Html.div,_U.list([$Styles.redTileInline,A2($Html$Events.onClick,address,ChangeColor($Utils.Red))]),_U.list([]))
                      ,A2($Html.div,_U.list([$Styles.orangeTileInline,A2($Html$Events.onClick,address,ChangeColor($Utils.Orange))]),_U.list([]))
                      ,A2($Html.div,_U.list([$Styles.purpleTileInline,A2($Html$Events.onClick,address,ChangeColor($Utils.Purple))]),_U.list([]))
                      ,A2($Html.div,_U.list([$Styles.greenTileInline,A2($Html$Events.onClick,address,ChangeColor($Utils.Green))]),_U.list([]))]))]));
   };
   var getFinishedView = F3(function (str,address,model) {
      return A2($Html.div,_U.list([$Styles.center]),_U.list([getFinishedText(str),A2(getPlayOptions,address,model),getPlayButton(address)]));
   });
   var getStartingView = F2(function (address,model) {
      return A2($Html.div,_U.list([$Styles.center]),_U.list([A2(getPlayOptions,address,model),getPlayButton(address)]));
   });
   var getRandomBoard = F2(function (seed,x) {    return A3($Utils.randomMatrix,seed,x,x);});
   var update = F2(function (action,model) {
      var _p9 = action;
      switch (_p9.ctor)
      {case "ChangeColor": return A2(changeColor,model,_p9._0);
         case "Start": var newBoard = A2(getRandomBoard,model.seed,model.boardSize);
           return _U.update(model,{board: $Maybe.Just($Basics.snd(newBoard)),seed: $Basics.fst(newBoard),status: $Utils.InGame,moves: model.startingMoves});
         case "BoardSize": return _U.update(model,{boardSize: _p9._0});
         case "Moves": return _U.update(model,{startingMoves: _p9._0});
         default: return _U.update(model,{showHint: true});}
   });
   var getColorForTile = function (t) {
      return _U.eq(t,$Utils.Yellow) ? $Styles.yellowTile : _U.eq(t,$Utils.Blue) ? $Styles.blueTile : _U.eq(t,$Utils.Red) ? $Styles.redTile : _U.eq(t,
      $Utils.Orange) ? $Styles.orangeTile : _U.eq(t,$Utils.Purple) ? $Styles.purpleTile : $Styles.greenTile;
   };
   var getViewBoard = function (model) {
      var _p10 = model.board;
      if (_p10.ctor === "Nothing") {
            return A2($Html.div,_U.list([$Styles.centerMarginTop(40)]),_U.list([$Html.text("Error")]));
         } else {
            return A2($Html.div,
            _U.list([$Styles.centerMarginTop(40)]),
            _U.list([A2($Html.h1,_U.list([$Styles.center]),_U.list([$Html.text("FillZone")]))
                    ,A2($Html.table,
                    _U.list([$Styles.centerMarginTop(20)]),
                    A3($List.foldr,
                    F2(function (x,c) {
                       return A2($Basics._op["++"],
                       _U.list([A2($Html.tr,
                       _U.list([$Styles.tableBorder]),
                       A3($List.foldr,
                       F2(function (y,d) {
                          return A2($Basics._op["++"],
                          _U.list([A2($Html.td,_U.list([getColorForTile(A3($Utils.getM,_p10._0,x,y))]),_U.list([$Html.text("")]))]),
                          d);
                       }),
                       _U.list([]),
                       _U.range(1,model.boardSize)))]),
                       c);
                    }),
                    _U.list([]),
                    _U.range(1,model.boardSize)))]));
         }
   };
   var getGameView = F2(function (address,model) {
      return A2($Html.div,
      _U.list([$Styles.center]),
      _U.list([getViewBoard(model),getButtons(address),getRemainingMoves(model),A2(getSuggestedMoveView,address,model)]));
   });
   var view = F2(function (address,model) {
      var _p11 = model.status;
      switch (_p11.ctor)
      {case "Starting": return A2(getStartingView,address,model);
         case "InGame": return A2(getGameView,address,model);
         case "Won": return A3(getFinishedView,"You win",address,model);
         default: return A3(getFinishedView,"You lose",address,model);}
   });
   var Model = F7(function (a,b,c,d,e,f,g) {    return {boardSize: a,board: b,seed: c,status: d,showHint: e,moves: f,startingMoves: g};});
   var startTime = Elm.Native.Port.make(_elm).inbound("startTime","Float",function (v) {    return typeof v === "number" ? v : _U.badPort("a number",v);});
   var startTimeSeed = $Random.initialSeed($Basics.round(startTime));
   var init = {boardSize: 6,board: $Maybe.Nothing,seed: startTimeSeed,status: $Utils.Starting,showHint: false,moves: 20,startingMoves: 20};
   var main = $StartApp$Simple.start({model: init,view: view,update: update});
   return _elm.Main.values = {_op: _op
                             ,startTimeSeed: startTimeSeed
                             ,Model: Model
                             ,init: init
                             ,getColorForTile: getColorForTile
                             ,getRandomBoard: getRandomBoard
                             ,view: view
                             ,getGameView: getGameView
                             ,getStartingView: getStartingView
                             ,getFinishedView: getFinishedView
                             ,getViewBoard: getViewBoard
                             ,getButtons: getButtons
                             ,getRemainingMoves: getRemainingMoves
                             ,getSuggestedMoveView: getSuggestedMoveView
                             ,getPlayOptions: getPlayOptions
                             ,getPlayButton: getPlayButton
                             ,getFinishedText: getFinishedText
                             ,ChangeColor: ChangeColor
                             ,Start: Start
                             ,BoardSize: BoardSize
                             ,Moves: Moves
                             ,ShowHint: ShowHint
                             ,update: update
                             ,changeColor: changeColor
                             ,getBoardStatus: getBoardStatus
                             ,getBoardStatusRec: getBoardStatusRec
                             ,main: main};
};