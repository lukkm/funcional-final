Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values) return _elm.Main.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp$Simple = Elm.StartApp.Simple.make(_elm),
   $String = Elm.String.make(_elm),
   $Styles = Elm.Styles.make(_elm),
   $Utils = Elm.Utils.make(_elm);
   var _op = {};
   var getBoardStatusRec = F4(function (board,color,x,y) {
      return _U.cmp(x,$Utils.sizeOf(board)) > 0 || _U.cmp(y,$Utils.sizeOf(board)) > 0 ? $Utils.Won : !_U.eq(A3($Utils.getM,board,x,y),
      color) ? $Utils.InGame : _U.eq(A4(getBoardStatusRec,board,color,x + 1,y),$Utils.Won) && _U.eq(A4(getBoardStatusRec,board,color,x,y + 1),
      $Utils.Won) ? $Utils.Won : $Utils.InGame;
   });
   var getBoardStatus = function (board) {    return A4(getBoardStatusRec,board,A3($Utils.getM,board,1,1),1,1);};
   var updateBoard = F5(function (board,x,y,originalColor,nextColor) {
      updateBoard: while (true) if (_U.cmp(x,1) < 0 || (_U.cmp(y,1) < 0 || (_U.cmp(x,$Utils.sizeOf(board)) > 0 || (_U.cmp(y,
      $Utils.sizeOf(board)) > 0 || (!_U.eq(A3($Utils.getM,board,x,y),originalColor) || _U.eq(originalColor,nextColor)))))) return board; else {
            var _v0 = A5(updateBoard,
            A5(updateBoard,A5(updateBoard,A4($Utils.putM,board,x,y,nextColor),x,y - 1,originalColor,nextColor),x - 1,y,originalColor,nextColor),
            x,
            y + 1,
            originalColor,
            nextColor),
            _v1 = x + 1,
            _v2 = y,
            _v3 = originalColor,
            _v4 = nextColor;
            board = _v0;
            x = _v1;
            y = _v2;
            originalColor = _v3;
            nextColor = _v4;
            continue updateBoard;
         }
   });
   var changeColor = F2(function (model,tile) {
      var remainingMoves = model.moves - 1;
      var updatedBoard = A5(updateBoard,model.board,1,1,A2($Utils.getL,A2($Utils.getL,model.board,1),1),tile);
      return _U.cmp(remainingMoves,0) > 0 ? _U.update(model,
      {board: updatedBoard,seed: model.seed,status: getBoardStatus(updatedBoard),moves: model.moves - 1}) : _U.update(model,
      {board: updatedBoard,seed: model.seed,status: $Utils.Lost,moves: 0});
   });
   var Start = {ctor: "Start"};
   var ChangeColor = function (a) {    return {ctor: "ChangeColor",_0: a};};
   var getFinishedText = function (str) {    return A2($Html.h1,_U.list([$Styles.center]),_U.list([$Html.text(str)]));};
   var getPlayButton = function (address) {
      return A2($Html.div,
      _U.list([$Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "margin",_1: "0 auto"},{ctor: "_Tuple2",_0: "width",_1: "250px"}]))]),
      _U.list([A2($Html.img,
      _U.list([$Html$Attributes.src("img/playbutton.jpeg")
              ,$Html$Attributes.width(250)
              ,A2($Html$Events.onClick,address,Start)
              ,$Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "margin-top",_1: "20px"}]))]),
      _U.list([]))]));
   };
   var getRemainingMoves = function (model) {
      return A2($Html.div,_U.list([$Styles.movesContainer]),_U.list([$Html.text(A2($String.append,"Remaining moves: ",$Basics.toString(model.moves)))]));
   };
   var getButtons = function (address) {
      return A2($Html.div,
      _U.list([$Styles.buttonsContainer]),
      _U.list([A2($Html.div,_U.list([$Styles.yellowTileInline,A2($Html$Events.onClick,address,ChangeColor($Utils.Yellow))]),_U.list([]))
              ,A2($Html.div,_U.list([$Styles.blueTileInline,A2($Html$Events.onClick,address,ChangeColor($Utils.Blue))]),_U.list([]))
              ,A2($Html.div,_U.list([$Styles.redTileInline,A2($Html$Events.onClick,address,ChangeColor($Utils.Red))]),_U.list([]))
              ,A2($Html.div,_U.list([$Styles.greenTileInline,A2($Html$Events.onClick,address,ChangeColor($Utils.Green))]),_U.list([]))]));
   };
   var getFinishedView = F2(function (str,address) {
      return A2($Html.div,_U.list([$Styles.center]),_U.list([getFinishedText(str),getPlayButton(address)]));
   });
   var getStartingView = function (address) {    return A2($Html.div,_U.list([$Styles.center]),_U.list([getPlayButton(address)]));};
   var getRandomBoard = function (seed) {    return A3($Utils.randomMatrix,seed,6,6);};
   var update = F2(function (action,model) {
      var _p0 = action;
      if (_p0.ctor === "ChangeColor") {
            return A2(changeColor,model,_p0._0);
         } else {
            var newBoard = getRandomBoard(model.seed);
            return _U.update(model,{board: $Basics.snd(newBoard),seed: $Basics.fst(newBoard),status: $Utils.InGame,moves: 10});
         }
   });
   var getColorForTile = function (t) {
      return _U.eq(t,$Utils.Yellow) ? $Styles.yellowTile : _U.eq(t,$Utils.Blue) ? $Styles.blueTile : _U.eq(t,$Utils.Red) ? $Styles.redTile : $Styles.greenTile;
   };
   var getViewBoard = function (model) {
      return A2($Html.div,
      _U.list([$Styles.centerMarginTop(40)]),
      _U.list([A2($Html.h1,_U.list([$Styles.center]),_U.list([$Html.text("FillZone")]))
              ,A2($Html.table,
              _U.list([$Styles.centerMarginTop(20)]),
              A3($List.foldr,
              F2(function (x,c) {
                 return A2($Basics._op["++"],
                 _U.list([A2($Html.tr,
                 _U.list([$Styles.tableBorder]),
                 A3($List.foldr,
                 F2(function (y,d) {
                    return A2($Basics._op["++"],
                    _U.list([A2($Html.td,_U.list([getColorForTile(A3($Utils.getM,model.board,x,y))]),_U.list([$Html.text("")]))]),
                    d);
                 }),
                 _U.list([]),
                 _U.range(1,6)))]),
                 c);
              }),
              _U.list([]),
              _U.range(1,6)))]));
   };
   var getGameView = F2(function (address,model) {
      return A2($Html.div,_U.list([$Styles.center]),_U.list([getViewBoard(model),getButtons(address),getRemainingMoves(model)]));
   });
   var view = F2(function (address,model) {
      var _p1 = model.status;
      switch (_p1.ctor)
      {case "Starting": return getStartingView(address);
         case "InGame": return A2(getGameView,address,model);
         case "Won": return A2(getFinishedView,"You win",address);
         default: return A2(getFinishedView,"You lose",address);}
   });
   var Model = F4(function (a,b,c,d) {    return {board: a,seed: b,status: c,moves: d};});
   var startTime = Elm.Native.Port.make(_elm).inbound("startTime","Float",function (v) {    return typeof v === "number" ? v : _U.badPort("a number",v);});
   var startTimeSeed = $Random.initialSeed($Basics.round(startTime));
   var init = {board: $Basics.snd(getRandomBoard(startTimeSeed)),seed: startTimeSeed,status: $Utils.Starting,moves: 10};
   var main = $StartApp$Simple.start({model: init,view: view,update: update});
   return _elm.Main.values = {_op: _op
                             ,startTimeSeed: startTimeSeed
                             ,Model: Model
                             ,init: init
                             ,getColorForTile: getColorForTile
                             ,getRandomBoard: getRandomBoard
                             ,view: view
                             ,getGameView: getGameView
                             ,getStartingView: getStartingView
                             ,getFinishedView: getFinishedView
                             ,getViewBoard: getViewBoard
                             ,getButtons: getButtons
                             ,getRemainingMoves: getRemainingMoves
                             ,getPlayButton: getPlayButton
                             ,getFinishedText: getFinishedText
                             ,ChangeColor: ChangeColor
                             ,Start: Start
                             ,update: update
                             ,changeColor: changeColor
                             ,updateBoard: updateBoard
                             ,getBoardStatus: getBoardStatus
                             ,getBoardStatusRec: getBoardStatusRec
                             ,main: main};
};