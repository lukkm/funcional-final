Elm.Utils = Elm.Utils || {};
Elm.Utils.make = function (_elm) {
   "use strict";
   _elm.Utils = _elm.Utils || {};
   if (_elm.Utils.values) return _elm.Utils.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var bottom = bottom;
   var getL = F2(function (l,n) {
      getL: while (true) {
         var _p0 = l;
         if (_p0.ctor === "[]") {
               return bottom;
            } else {
               if (_U.eq(n,1)) return _p0._0; else {
                     var _v1 = _p0._1,_v2 = n - 1;
                     l = _v1;
                     n = _v2;
                     continue getL;
                  }
            }
      }
   });
   var Green = {ctor: "Green"};
   var Red = {ctor: "Red"};
   var Blue = {ctor: "Blue"};
   var Yellow = {ctor: "Yellow"};
   var getTileFromNumber = function (x) {    return _U.eq(x,0) ? Yellow : _U.eq(x,1) ? Blue : _U.eq(x,2) ? Red : Green;};
   var randomMatrix = F2(function (row,col) {
      return A2($List.repeat,
      row,
      A2($List.repeat,col,$Basics.fst(A2($Random.generate,A2($Random.map,getTileFromNumber,A2($Random.$int,0,3)),$Random.initialSeed(12345)))));
   });
   return _elm.Utils.values = {_op: _op
                              ,Yellow: Yellow
                              ,Blue: Blue
                              ,Red: Red
                              ,Green: Green
                              ,bottom: bottom
                              ,getTileFromNumber: getTileFromNumber
                              ,randomMatrix: randomMatrix
                              ,getL: getL};
};