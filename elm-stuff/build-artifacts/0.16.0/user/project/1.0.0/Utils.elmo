Elm.Utils = Elm.Utils || {};
Elm.Utils.make = function (_elm) {
   "use strict";
   _elm.Utils = _elm.Utils || {};
   if (_elm.Utils.values) return _elm.Utils.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var sizeOf = function (l) {    return A3($List.foldr,F2(function (x,c) {    return c + 1;}),0,l);};
   var putL = F3(function (l,a,n) {
      var _p0 = l;
      if (_p0.ctor === "[]") {
            return _U.list([]);
         } else {
            var _p1 = _p0._1;
            return _U.eq(n,1) ? A2($List._op["::"],a,_p1) : A2($List._op["::"],_p0._0,A3(putL,_p1,a,n - 1));
         }
   });
   var randomInt = function (seed) {    return A2($Random.generate,A2($Random.$int,0,5),seed);};
   var bottom = bottom;
   var doFold = F2(function (x,l) {
      var _p2 = l;
      if (_p2.ctor === "[]") {
            return bottom;
         } else {
            var _p3 = _p2._0;
            return A2($List._op["::"],randomInt($Basics.snd(_p3)),A2($List._op["::"],_p3,_p2._1));
         }
   });
   var randomRange = F2(function (initialSeed,size) {    return A3($List.foldr,doFold,_U.list([{ctor: "_Tuple2",_0: 0,_1: initialSeed}]),_U.range(1,size));});
   var getL = F2(function (l,n) {
      getL: while (true) {
         var _p4 = l;
         if (_p4.ctor === "[]") {
               return bottom;
            } else {
               if (_U.eq(n,1)) return _p4._0; else {
                     var _v3 = _p4._1,_v4 = n - 1;
                     l = _v3;
                     n = _v4;
                     continue getL;
                  }
            }
      }
   });
   var getM = F3(function (m,r,c) {    return A2(getL,A2(getL,m,r),c);});
   var putM = F4(function (m,r,c,elem) {
      var _p5 = m;
      if (_p5.ctor === "[]") {
            return bottom;
         } else {
            var _p7 = _p5._1;
            var _p6 = _p5._0;
            return _U.eq(r,1) ? A2($List._op["::"],A3(putL,_p6,elem,c),_p7) : A2($List._op["::"],_p6,A4(putM,_p7,r - 1,c,elem));
         }
   });
   var updateBoard = F5(function (board,x,y,originalColor,nextColor) {
      updateBoard: while (true) if (_U.cmp(x,1) < 0 || (_U.cmp(y,1) < 0 || (_U.cmp(x,sizeOf(board)) > 0 || (_U.cmp(y,sizeOf(board)) > 0 || (!_U.eq(A3(getM,
      board,
      x,
      y),
      originalColor) || _U.eq(originalColor,nextColor)))))) return board; else {
            var _v6 = A5(updateBoard,
            A5(updateBoard,A5(updateBoard,A4(putM,board,x,y,nextColor),x,y - 1,originalColor,nextColor),x - 1,y,originalColor,nextColor),
            x,
            y + 1,
            originalColor,
            nextColor),
            _v7 = x + 1,
            _v8 = y,
            _v9 = originalColor,
            _v10 = nextColor;
            board = _v6;
            x = _v7;
            y = _v8;
            originalColor = _v9;
            nextColor = _v10;
            continue updateBoard;
         }
   });
   var Lost = {ctor: "Lost"};
   var Won = {ctor: "Won"};
   var InGame = {ctor: "InGame"};
   var Starting = {ctor: "Starting"};
   var Purple = {ctor: "Purple"};
   var Orange = {ctor: "Orange"};
   var Green = {ctor: "Green"};
   var Red = {ctor: "Red"};
   var Blue = {ctor: "Blue"};
   var Yellow = {ctor: "Yellow"};
   var getTileFromNumber = function (x) {
      return _U.eq(x,0) ? Yellow : _U.eq(x,1) ? Blue : _U.eq(x,2) ? Red : _U.eq(x,3) ? Orange : _U.eq(x,4) ? Purple : Green;
   };
   var randomMatrix = F3(function (seed,row,col) {
      var range = A2(randomRange,seed,row * col);
      return {ctor: "_Tuple2"
             ,_0: $Basics.snd(A2(getL,range,1))
             ,_1: A3($List.foldr,
             F2(function (x,c) {
                return A2($List._op["::"],
                A3($List.foldr,
                F2(function (y,d) {    return A2($List._op["::"],getTileFromNumber($Basics.fst(A2(getL,range,x * col + y))),d);}),
                _U.list([]),
                _U.range(1,col)),
                c);
             }),
             _U.list([]),
             _U.range(0,row - 1))};
   });
   return _elm.Utils.values = {_op: _op
                              ,Yellow: Yellow
                              ,Blue: Blue
                              ,Red: Red
                              ,Green: Green
                              ,Orange: Orange
                              ,Purple: Purple
                              ,Starting: Starting
                              ,InGame: InGame
                              ,Won: Won
                              ,Lost: Lost
                              ,bottom: bottom
                              ,getTileFromNumber: getTileFromNumber
                              ,randomInt: randomInt
                              ,randomMatrix: randomMatrix
                              ,randomRange: randomRange
                              ,updateBoard: updateBoard
                              ,doFold: doFold
                              ,getL: getL
                              ,putL: putL
                              ,sizeOf: sizeOf
                              ,getM: getM
                              ,putM: putM};
};